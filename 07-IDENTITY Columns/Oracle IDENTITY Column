Oracle IDENTITY Column
-----------------------
 - In Oracle Identity Columns is introduced by in after 12c 
 - It is a New way to allow you to Define an identity column for a table which is similar to AUTO INCREMENT column in MYSQL 
 - The Identity column is very useful for the surrogate primary key column 
 - when we insert a new row in to the identity column Oracle will autogenerates or insert a sequential value into the column 

 	To Define an Identity Column we use the identity Clause same like below

 		GENERATED <always> or <default by> or <on null> AS IDENTITY <idebtity_option_way>

 			GENERATED always as <identity_option>
 			GENERATED default by as <identity_option>
 			GENERATED on null as <identity_option>

 		Note: First Generated key word is mandatory 
 			  second we need to specify an option to generate indentity values

 	GENERATED ALWAYS:
 		- Here Oracle will always generates a value for the identity column 
 		- it will attemt insert a value into the identity column 
 	
 	GENERATED BY DEFAULT:
 		- Here if we not provide a value or no specify value then Oracle automatically insert a value 
 		- If we specify a value then it will take by default that value for this option
 		- If we specify NULL value into IDENTITY Column  then it will throw an error 

 	GENERATED BY DEFAULT ON NULL:
 		- Oracle will generate a value for the identity column if we provide NULL value or no value at all

 we can specify options with number of identity column
 -------------------------------------------------------
  - START WITH INTIAL_value
  	- it will controll initial value to use for the identity column. the default initial value is 1

  - INCREMENT BY interval_value
  	- Defining the interval between generated values By default is interval value is 1

  - CACHE
  	- It will generate a number of values that Oracle should generate beforehand to improve the performance we use this option for the number of columns that has a high number of inserts 

Practicles of OUTPUT
-----------------------

 1. Using ALWAYS AS 

	step1: create a table for idetity practice

				
		SQL> create table example_tbl(no number(2) generated always as identity, name varchar2(10));

		Table created.

		SQL>

	step2: Add values into table with use column only name 

		SQL> insert into example_tbl(name) values('thej');

		1 row created.

		SQL> insert into example_tbl(name) values('ram');

		1 row created.

		SQL> select * from example_tbl;

		        NO NAME
		---------- ----------
		         1 thej
		         2 ram

		SQL>
		Note: Here we specifying column name only and no column automatically takes as orderwise

	step3: lets add no and name columns it will throw an error

		SQL> insert into example_tbl(no,name) values(4,'ravi');
		insert into example_tbl(no,name) values(4,'ravi')
		                        *
		ERROR at line 1:
		ORA-32795: cannot insert into a generated always identity column


		SQL>

	Note: we can not insert values to here system automatically will generates values by using "always as" 

 2. BY DEFAULT AS

 	step1: lets create a table with using by default as 

 		SQL> create table example_tbl2 (no number(2) generated by default as identity, name varchar2(10));

		Table created.

		SQL>

	step2: Add some valuse into table

		SQL> insert into example_tbl2(name) values('shiva');

		1 row created.

		SQL> insert into example_tbl2(name) values('ravi');

		1 row created.

		SQL> select * from example_tbl2;

		        NO NAME
		---------- ----------
		         1 shiva
		         2 ravi

		SQL>

	step3: lets add columns values also no and name 


		SQL> insert into example_tbl2(no,name) values(10,'ram');

		1 row created.
		SQL> select * from example_tbl2;

		        NO NAME
		---------- ----------
		         1 shiva
		         2 ravi
		        10 ram

		SQL>
		Note: By using "by default as" identity it will take our inserted valuse also it will take 
 
 3. BY DEFAULT ON NULL 

 	step1: lets create a table with "by default on null" identity 

 		SQL> create table example_tbl3(no number(2) generated by default on null as identity, name varchar2(10));

		Table created.

		SQL>

	step3: Insert some valuse into table


		SQL> insert into example_tbl3(name) values('shiva');

		1 row created.

		SQL> insert into example_tbl3(name) values('ragu');

		1 row created.

		SQL> insert into example_tbl3(no,name) values(12,'ramu');

		1 row created.

		SQL> insert into example_tbl3(no,name) values(NULL,'rani');

		1 row created.

		SQL> select * from example_tbl3;

		        NO NAME
		---------- ----------
		         1 shiva
		         2 ragu
		        12 ramu
		         3 rani

		SQL>

		Note: here it will take sequential number even if we give NULL also 

Now Using Third party like Options with IDENTITY word
 
 1. START WITH INITIAL VALUE
 2. INCREMENT BY INTERVAL VALUE
 3. CACHE

 	- we can create table with generated "always or by default or by default on null" with these options like (start with initial value or increment by interval value or cache) options 

 	step1: lets create a table using always with "increment by" option 


		SQL> create table example_tbl4(no number(2) generated always as identity start with 5 increment by 5, name varchar2(10));

		Table created.

		SQL>

	step2: lets add some value into table 


		SQL> insert into example_tbl4(name) values('thej');

		1 row created.

		SQL> insert into example_tbl4(name) values('raju');

		1 row created.

		SQL> select * from example_tbl4;

		        NO NAME
		---------- ----------
		         5 thej
		        10 raju

		SQL>

		Note: Now we need to observe it will increment by 5 everytime


RULES Or Restrictions For IDENTITY COLUMNS
--------------------------------------------
 - Each table must have only one identity column 
 - the data type of identity column must be numeric datatype 
 - user defined datatype is not allowed to use identity clause
 - the identity column is not inherited by "create table as select statment"
 - the identity column cannot have another default constraint
 - the encryption algorithm for encrypted identity columns can be inferred therefore we should use a strong encryption algorithm 
 - The inline constraint of the identity column must not conflict with the NOT NULL and NOT DEFERRABLE constraint started by the identity clause 