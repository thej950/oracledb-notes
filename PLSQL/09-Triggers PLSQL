Triggers PLSQL
---------------
 - Triggers are stored programs which are automatically executed when some events are executed 
 - To work with triggers to create triggers we should have desired permissions 

 Types of Triggers in Oracle 
 ----------------------------
  1. Timing Based Triggers
  2. Based on the level 
  3. Event Based Trigger

  1. Based on Timing Trigger 
  	BEFORE TRIGGER:
  	 - it will execute before specified event got executed 
  	AFTER TRIGGER
  	 - It will execute after event has occured 
  	INSTEAD OF TRIGGER
  	 - it is a special type of trigger 
  	 - it is used only in DML triggers 
  	 - it is used any DML event is going to occure on the complex view 

  2. Based on Level Trigger
  	STATEMENT LEVEL TRIGGER
  	 - it will execute one time for the specified event statement 
  	ROW LEVEL TRIGGER
  	 - it will execute for each record that got affected in the specified event (ony for DML)

  3. Event based trigger 
  	DML TRIGGER
  	 - it will execute when the DML event is specified (INSERT/UPDATE/DELETE)
  	DDL TRIGGER
  	 - it will execute when the DDL event is specified (CREATE/ALTER)
  	DATABASE TRIGGER
  	 - it will execute when the database event is specified (LOGON/LOGOFF/STARTUP/SHUTDOWN)

 Bnifits of triggers
 --------------------
  - Generating some derived column values automatically 
  - Enforcing referential integrity 
  - Event logging and storing information on table access
  - Auditing
  - Sychronouse replication of tables 
  - Imposing security Authoriations 
  - Preventing invalid Transactions 

  Syntax For To create Trigger:
  	======================================================
  	CREATE [OR REPLACE] TRIGGER <trigger_name>
  	[BEFORE | AFTER | INSTEAD OF]
  	[INSERT | UPDATE | DELETE]
  	ON <name of the underlying object>
  	[FOR EACH ROW]
  	[WHEN <condition for trigger to get execute>]
  	DECLARE
  		<declaration part>
  	BEGIN
  		<Execution part>
  	EXCEPTION
  		<Exception handling part>
  	END;
  	====================================================

  	Note: :old and :new are pseudorecords refered to access rowlevel data when using row level trigger 

  	:old --> referes to old value 
  	:new --> refers to new value

  	For Below operations are respective to old and new values 
  	  1. INSERT --> :old.value=NULL, :new value=post insert value
  	  2. DELETE --> :old.value= Pre Delete value, :new value =NULL
  	  3. UPDATE --> :old.value=Pre ipdate value,:new value =Post update value 

  DDL Triggers:
  ------------
  	- Using the Data Definition Language Triggers The Oracle DBA can automatically track all changes to the database, including changes to tables.indexes and constraints 
  	- the data from this trigger especially useful for change control for the oracle DBA 

  	Synatx:
  		===================================================
  		CREATE [OR REPLACE] TRIGGER <trigger_name>
  		{BEFORE | AFTER} {DDL event} ON {DATABASE | SCHEMA}
  		[WHEN (...)]
  		DECLARE 
  		variable declarations 
  		BEGIN
  		...some code...
  		END;
  		============================================

  1. lets create a trigger with name display_salary_changes

  	SQL>edit file1
  	=====================================================
  	 CREATE OR REPLACE TRIGGER display_salary_changes
  	 BEFORE DELETE OR INSERT OR UPDATE ON employee
  	 FOR EACH ROW 
  	 WHEN (NEW.EMPNO > 0)
  	 DECLARE 
  	 	sal_diff number;
  	 BEGIN
  	 	sal_diff := :NEW.sal - :OLD.sal;
  	 	dbms_output.put_line('Old salary: ' || :OLD.sal);
  	 	dbms_output.put_line('New salary: ' || :NEW.sal);
  	 	dbms_output.put_line('Salary difference: ' || sal_diff);
  	 END;
  	 /
  	=========================================================
  	SQL>@file1

  		SQL>update emp set sal=3500 where eno=100;
  		Old salary: 2000
  		New salary: 3500
  		salary difference: 1500
  		1 Row updated
  		SQL>

  		SQL>insert into emp values (103,'nani','clerk',4000,'12-may-99','hyd',500001);
  		Old salary:
  		New salary: 4000
  		salary difference
  		SQL>

  		SQL> drop trigger display_salary_changes

  2. Lets create a Audit table 
   SQL> edit file2
   ========================================
    CREATE TABLE audits (
    	audit_id		 NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    	table_name		 VARCHAR2(255),
    	trasaction_name	 VARCHAR2(10),
    	by_user 		 VARCHAR2(30),
    	transaction_date DATE
    );
   ============================================
    SQL>@file2
     - from above table creation we added columns with trigger points to automate add values with them 

   - lets create trigger with name employs_audit_trg

   SQL>edit file3
   =================================================
    CREATE OR REPLACE TRIGGER employs_audit_trg
    	AFTER 
    	UPDATE OR DELETE 
    	ON emp
    	FOR EACH ROW 
    DECLARE 
    	l_trasaction VARCHAR2(10);
    BEGIN
    	-- determine the transaction type 
    	l_transaction := CASE
    		WHEN UPDATING THEN 'UPDATE'
    		WHEN DELETING THEN 'DELETE'
    	END;

    	-- insert a row into the audit table 
    	INSERT INTO audits (table_name, transaction_name, by_user, transaction_date)
    	VALUES('EMP', l_transaction, USER, SYSDATE);
    END;
    /
   =============================================================
   	SQL>@file3
   	SQL>drop table audits;

 3. lets create DDL triggers script for DDL auditing 

 	SQL>edit file4
 	=====================================================
 	 CREATE TABLE AUDIT_DDL (
 	 	d_date,
 	 	OSUSER varchar2(255),
 	 	CURRENT_USER varchar2(255),
 	 	HOST varchar2(255),
 	 	TERMINAL varchar2(255),
 	 	owner varchar2(30),
 	 	type varchar2(30),
 	 	name varchar2(30),
 	 	sysevent varcha2(30)
 	 );
 	============================================================

 	- lets create trigger 

 	
 	SQL>edit file5
 	========================================================
 	 create or replace trigger_audit_ddl_trg after ddl on schema 
 	 begin
 	 	if (ora_sysevent='TRUNCATE')
 	 	then 
 	 		null; -- i do not care about truncate 
 	 	else
 	 		insert into audit_ddl(d, osuser,current_user,host,terminal,owner,type,name,sysevent)
 	 		values(
 	 			sysdate,
 	 			sys_context('USERENV','OS_USER'),
 	 			sys_context('USERENV','CURRENT_USER'),
 	 			sys_context('USERENV','HOST'),
 	 			sys_context('USERENV','TERMINAL'),
 	 			ora_dict_obj_owner,
 	 			ora_dict_obj_type,
 	 			ora_dict_obj_name,
 	 			ora_sysevent
 	 		);
 	 	end if;
 	 end;
 	 /
 	===============================================================


 SQL> create table abc(no number(3));
 Table created

 SQL> select * from audit_ddl;



 